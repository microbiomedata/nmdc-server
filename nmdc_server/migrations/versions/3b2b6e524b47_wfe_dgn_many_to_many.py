"""Make the relationship between Data Generation and Workflow Execution many to many.

This relationship is determined by the `was_informed_by` slot in the NMDC Schema.
A recent change to the LinkML schema updated the cardinality of that slot from single
valued to multivalued, effectively making it a many-to-many relationship. This migration
adds the necessary intermediate tables to mirror that change in the Postgres schema.

Revision ID: 3b2b6e524b47
Revises: 6cb0b331ce8c
Create Date: 2025-07-14 20:23:46.235748

"""

# flake8: noqa: E501

from typing import Optional

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "3b2b6e524b47"
down_revision: Optional[str] = "6cb0b331ce8c"
branch_labels: Optional[str] = None
depends_on: Optional[str] = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "mags_analysis_data_generation_association",
        sa.Column("mags_analysis_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_mags_analysis_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["mags_analysis_id"],
            ["mags_analysis.id"],
            name=op.f(
                "fk_mags_analysis_data_generation_association_mags_analysis_id_mags_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "mags_analysis_id",
            "data_generation_id",
            name=op.f("uq_mags_analysis_data_generation_association_mags_analysis_id"),
        ),
    )
    op.create_table(
        "metabolomics_analysis_data_generation_association",
        sa.Column("metabolomics_analysis_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_metabolomics_analysis_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["metabolomics_analysis_id"],
            ["metabolomics_analysis.id"],
            name=op.f(
                "fk_metabolomics_analysis_data_generation_association_metabolomics_analysis_id_metabolomics_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "metabolomics_analysis_id",
            "data_generation_id",
            name=op.f(
                "uq_metabolomics_analysis_data_generation_association_metabolomics_analysis_id"
            ),
        ),
    )
    op.create_table(
        "metagenome_annotation_data_generation_association",
        sa.Column("metagenome_annotation_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_metagenome_annotation_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["metagenome_annotation_id"],
            ["metagenome_annotation.id"],
            name=op.f(
                "fk_metagenome_annotation_data_generation_association_metagenome_annotation_id_metagenome_annotation"
            ),
        ),
        sa.UniqueConstraint(
            "metagenome_annotation_id",
            "data_generation_id",
            name=op.f(
                "uq_metagenome_annotation_data_generation_association_metagenome_annotation_id"
            ),
        ),
    )
    op.create_table(
        "metagenome_assembly_data_generation_association",
        sa.Column("metagenome_assembly_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_metagenome_assembly_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["metagenome_assembly_id"],
            ["metagenome_assembly.id"],
            name=op.f(
                "fk_metagenome_assembly_data_generation_association_metagenome_assembly_id_metagenome_assembly"
            ),
        ),
        sa.UniqueConstraint(
            "metagenome_assembly_id",
            "data_generation_id",
            name=op.f("uq_metagenome_assembly_data_generation_association_metagenome_assembly_id"),
        ),
    )
    op.create_table(
        "metaproteomic_analysis_data_generation_association",
        sa.Column("metaproteomic_analysis_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_metaproteomic_analysis_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["metaproteomic_analysis_id"],
            ["metaproteomic_analysis.id"],
            name=op.f(
                "fk_metaproteomic_analysis_data_generation_association_metaproteomic_analysis_id_metaproteomic_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "metaproteomic_analysis_id",
            "data_generation_id",
            name=op.f(
                "uq_metaproteomic_analysis_data_generation_association_metaproteomic_analysis_id"
            ),
        ),
    )
    op.create_table(
        "metatranscriptome_annotation_data_generation_association",
        sa.Column("metatranscriptome_annotation_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_metatranscriptome_annotation_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["metatranscriptome_annotation_id"],
            ["metatranscriptome_annotation.id"],
            name=op.f(
                "fk_metatranscriptome_annotation_data_generation_association_metatranscriptome_annotation_id_metatranscriptome_annotation"
            ),
        ),
        sa.UniqueConstraint(
            "metatranscriptome_annotation_id",
            "data_generation_id",
            name=op.f(
                "uq_metatranscriptome_annotation_data_generation_association_metatranscriptome_annotation_id"
            ),
        ),
    )
    op.create_table(
        "metatranscriptome_assembly_data_generation_association",
        sa.Column("metatranscriptome_assembly_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_metatranscriptome_assembly_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["metatranscriptome_assembly_id"],
            ["metatranscriptome_assembly.id"],
            name=op.f(
                "fk_metatranscriptome_assembly_data_generation_association_metatranscriptome_assembly_id_metatranscriptome_assembly"
            ),
        ),
        sa.UniqueConstraint(
            "metatranscriptome_assembly_id",
            "data_generation_id",
            name=op.f(
                "uq_metatranscriptome_assembly_data_generation_association_metatranscriptome_assembly_id"
            ),
        ),
    )
    op.create_table(
        "metatranscriptome_data_generation_association",
        sa.Column("metatranscriptome_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_metatranscriptome_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["metatranscriptome_id"],
            ["metatranscriptome.id"],
            name=op.f(
                "fk_metatranscriptome_data_generation_association_metatranscriptome_id_metatranscriptome"
            ),
        ),
        sa.UniqueConstraint(
            "metatranscriptome_id",
            "data_generation_id",
            name=op.f("uq_metatranscriptome_data_generation_association_metatranscriptome_id"),
        ),
    )
    op.create_table(
        "nom_analysis_data_generation_association",
        sa.Column("nom_analysis_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_nom_analysis_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["nom_analysis_id"],
            ["nom_analysis.id"],
            name=op.f("fk_nom_analysis_data_generation_association_nom_analysis_id_nom_analysis"),
        ),
        sa.UniqueConstraint(
            "nom_analysis_id",
            "data_generation_id",
            name=op.f("uq_nom_analysis_data_generation_association_nom_analysis_id"),
        ),
    )
    op.create_table(
        "read_based_analysis_data_generation_association",
        sa.Column("read_based_analysis_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_read_based_analysis_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["read_based_analysis_id"],
            ["read_based_analysis.id"],
            name=op.f(
                "fk_read_based_analysis_data_generation_association_read_based_analysis_id_read_based_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "read_based_analysis_id",
            "data_generation_id",
            name=op.f("uq_read_based_analysis_data_generation_association_read_based_analysis_id"),
        ),
    )
    op.create_table(
        "reads_qc_data_generation_association",
        sa.Column("reads_qc_id", sa.String(), nullable=True),
        sa.Column("data_generation_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_generation_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_reads_qc_data_generation_association_data_generation_id_omics_processing"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["reads_qc_id"],
            ["reads_qc.id"],
            name=op.f("fk_reads_qc_data_generation_association_reads_qc_id_reads_qc"),
        ),
        sa.UniqueConstraint(
            "reads_qc_id",
            "data_generation_id",
            name=op.f("uq_reads_qc_data_generation_association_reads_qc_id"),
        ),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("reads_qc_data_generation_association")
    op.drop_table("read_based_analysis_data_generation_association")
    op.drop_table("nom_analysis_data_generation_association")
    op.drop_table("metatranscriptome_data_generation_association")
    op.drop_table("metatranscriptome_assembly_data_generation_association")
    op.drop_table("metatranscriptome_annotation_data_generation_association")
    op.drop_table("metaproteomic_analysis_data_generation_association")
    op.drop_table("metagenome_assembly_data_generation_association")
    op.drop_table("metagenome_annotation_data_generation_association")
    op.drop_table("metabolomics_analysis_data_generation_association")
    op.drop_table("mags_analysis_data_generation_association")
    # ### end Alembic commands ###
