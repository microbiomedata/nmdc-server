"""empty message

Revision ID: 780ab86a4f27
Revises: 
Create Date: 2022-06-08 19:49:41.862184

"""
# flake8: noqa
from typing import Optional

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "780ab86a4f27"
down_revision: Optional[str] = None
branch_labels: Optional[str] = None
depends_on: Optional[str] = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bulk_download",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("orcid", sa.String(), nullable=False),
        sa.Column("ip", sa.String(), nullable=False),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("conditions", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.Column("filter", postgresql.JSONB(astext_type=sa.Text()), nullable=True),  # type: ignore
        sa.PrimaryKeyConstraint("id", name=op.f("pk_bulk_download")),
    )
    op.create_table(
        "doi_info",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("info", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.PrimaryKeyConstraint("id", name=op.f("pk_doi_info")),
    )
    op.create_table(
        "envo_term",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.PrimaryKeyConstraint("id", name=op.f("pk_envo_term")),
    )
    op.create_table(
        "envo_tree",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("parent_id", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_envo_tree")),
    )
    op.create_index(op.f("ix_envo_tree_parent_id"), "envo_tree", ["parent_id"], unique=False)
    op.create_table(
        "gene_function",
        sa.Column("id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_gene_function")),
    )
    op.create_table(
        "ingest_lock",
        sa.Column("id", sa.Boolean(), nullable=False),
        sa.Column("started", sa.DateTime(), nullable=False),
        sa.CheckConstraint("id", name=op.f("ck_ingest_lock_singleton")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ingest_lock")),
    )
    op.create_table(
        "ko_term_text",
        sa.Column("term", sa.String(), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("term", name=op.f("pk_ko_term_text")),
    )
    op.create_table(
        "ko_term_to_module",
        sa.Column("term", sa.String(), nullable=False),
        sa.Column("module", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("term", "module", name=op.f("pk_ko_term_to_module")),
    )
    op.create_index(
        op.f("ix_ko_term_to_module_module"),
        "ko_term_to_module",
        ["module"],
        unique=False,
    )
    op.create_table(
        "ko_term_to_pathway",
        sa.Column("term", sa.String(), nullable=False),
        sa.Column("pathway", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("term", "pathway", name=op.f("pk_ko_term_to_pathway")),
    )
    op.create_index(
        op.f("ix_ko_term_to_pathway_pathway"),
        "ko_term_to_pathway",
        ["pathway"],
        unique=False,
    )
    op.create_table(
        "principal_investigator",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("orcid", sa.String(), nullable=True),
        sa.Column("image", sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_principal_investigator")),
    )
    op.create_table(
        "search_index",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("table", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("field", sa.String(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_search_index")),
    )
    op.create_table(
        "submission_metadata",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("author_orcid", sa.String(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("metadata_submission", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.PrimaryKeyConstraint("id", name=op.f("pk_submission_metadata")),
    )
    op.create_table(
        "website",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_website")),
        sa.UniqueConstraint("url", name=op.f("uq_website_url")),
    )
    op.create_table(
        "envo_ancestor",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("ancestor_id", sa.String(), nullable=False),
        sa.Column("direct", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ancestor_id"],
            ["envo_term.id"],
            name=op.f("fk_envo_ancestor_ancestor_id_envo_term"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["envo_term.id"], name=op.f("fk_envo_ancestor_id_envo_term")
        ),
        sa.PrimaryKeyConstraint("id", "ancestor_id", name=op.f("pk_envo_ancestor")),
    )
    # Alembic bug or something.  sa.UniqueConstraint in the create_table above doesn't result
    # in the correct POSTGRESQL state because I guess multi-column unique constraints don't
    # work when specified in that way.  Separating it like this works.
    op.create_unique_constraint(op.f("uq_envo_ancestor_id"), "envo_ancestor", ["id", "ancestor_id"])
    op.create_table(
        "publication",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("doi", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["doi"], ["doi_info.id"], name=op.f("fk_publication_doi_doi_info")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_publication")),
        sa.UniqueConstraint("doi", name=op.f("uq_publication_doi")),
    )
    op.create_table(
        "study",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("alternate_identifiers", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.Column("annotations", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.Column("add_date", sa.DateTime(), nullable=True),
        sa.Column("mod_date", sa.DateTime(), nullable=True),
        sa.Column("gold_name", sa.String(), nullable=False),
        sa.Column("gold_description", sa.String(), nullable=False),
        sa.Column("scientific_objective", sa.String(), nullable=False),
        sa.Column("doi", sa.String(), nullable=True),
        sa.Column("multiomics", sa.Integer(), nullable=False),
        sa.Column(
            "has_credit_associations", postgresql.JSONB(astext_type=sa.Text()), nullable=True  # type: ignore
        ),
        sa.Column("relevant_protocols", postgresql.JSONB(astext_type=sa.Text()), nullable=True),  # type: ignore
        sa.Column("funding_sources", postgresql.JSONB(astext_type=sa.Text()), nullable=True),  # type: ignore
        sa.Column("ess_dive_datasets", postgresql.JSONB(astext_type=sa.Text()), nullable=True),  # type: ignore
        sa.Column("principal_investigator_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["doi"], ["doi_info.id"], name=op.f("fk_study_doi_doi_info")),
        sa.ForeignKeyConstraint(
            ["principal_investigator_id"],
            ["principal_investigator.id"],
            name=op.f("fk_study_principal_investigator_id_principal_investigator"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_study")),
    )
    op.create_table(
        "biosample",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("alternate_identifiers", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.Column("annotations", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.Column("add_date", sa.DateTime(), nullable=True),
        sa.Column("mod_date", sa.DateTime(), nullable=True),
        sa.Column("collection_date", sa.DateTime(), nullable=True),
        sa.Column("depth", sa.Float(), nullable=True),
        sa.Column("env_broad_scale_id", sa.String(), nullable=True),
        sa.Column("env_local_scale_id", sa.String(), nullable=True),
        sa.Column("env_medium_id", sa.String(), nullable=True),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.Column("study_id", sa.String(), nullable=False),
        sa.Column("multiomics", sa.Integer(), nullable=False),
        sa.Column("ecosystem", sa.String(), nullable=True),
        sa.Column("ecosystem_category", sa.String(), nullable=True),
        sa.Column("ecosystem_type", sa.String(), nullable=True),
        sa.Column("ecosystem_subtype", sa.String(), nullable=True),
        sa.Column("specific_ecosystem", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["env_broad_scale_id"],
            ["envo_term.id"],
            name=op.f("fk_biosample_env_broad_scale_id_envo_term"),
        ),
        sa.ForeignKeyConstraint(
            ["env_local_scale_id"],
            ["envo_term.id"],
            name=op.f("fk_biosample_env_local_scale_id_envo_term"),
        ),
        sa.ForeignKeyConstraint(
            ["env_medium_id"],
            ["envo_term.id"],
            name=op.f("fk_biosample_env_medium_id_envo_term"),
        ),
        sa.ForeignKeyConstraint(
            ["study_id"], ["study.id"], name=op.f("fk_biosample_study_id_study")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_biosample")),
    )
    op.create_table(
        "study_publication",
        sa.Column("study_id", sa.String(), nullable=False),
        sa.Column("publication_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["publication_id"],
            ["publication.id"],
            name=op.f("fk_study_publication_publication_id_publication"),
        ),
        sa.ForeignKeyConstraint(
            ["study_id"], ["study.id"], name=op.f("fk_study_publication_study_id_study")
        ),
        sa.PrimaryKeyConstraint("study_id", "publication_id", name=op.f("pk_study_publication")),
    )
    op.create_table(
        "study_website",
        sa.Column("study_id", sa.String(), nullable=False),
        sa.Column("website_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["study_id"], ["study.id"], name=op.f("fk_study_website_study_id_study")
        ),
        sa.ForeignKeyConstraint(
            ["website_id"],
            ["website.id"],
            name=op.f("fk_study_website_website_id_website"),
        ),
        sa.PrimaryKeyConstraint("study_id", "website_id", name=op.f("pk_study_website")),
    )
    op.create_table(
        "omics_processing",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("alternate_identifiers", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.Column("annotations", postgresql.JSONB(astext_type=sa.Text()), nullable=False),  # type: ignore
        sa.Column("add_date", sa.DateTime(), nullable=True),
        sa.Column("mod_date", sa.DateTime(), nullable=True),
        sa.Column("biosample_id", sa.String(), nullable=True),
        sa.Column("study_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["biosample_id"],
            ["biosample.id"],
            name=op.f("fk_omics_processing_biosample_id_biosample"),
        ),
        sa.ForeignKeyConstraint(
            ["study_id"], ["study.id"], name=op.f("fk_omics_processing_study_id_study")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_omics_processing")),
    )
    op.create_table(
        "data_object",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("file_size_bytes", sa.BigInteger(), nullable=False),
        sa.Column("md5_checksum", sa.String(), nullable=True),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column("file_type", sa.String(), nullable=True),
        sa.Column("file_type_description", sa.String(), nullable=True),
        sa.Column("workflow_type", sa.String(), nullable=True),
        sa.Column("omics_processing_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_data_object_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_data_object")),
    )
    op.create_table(
        "mags_analysis",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("input_contig_num", sa.BigInteger(), nullable=True),
        sa.Column("too_short_contig_num", sa.BigInteger(), nullable=True),
        sa.Column("lowDepth_contig_num", sa.BigInteger(), nullable=True),
        sa.Column("unbinned_contig_num", sa.BigInteger(), nullable=True),
        sa.Column("binned_contig_num", sa.BigInteger(), nullable=True),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_mags_analysis_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mags_analysis")),
    )
    op.create_table(
        "metabolomics_analysis",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("used", sa.String(), nullable=False),
        sa.Column("has_calibration", sa.String(), nullable=False),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_metabolomics_analysis_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_metabolomics_analysis")),
    )
    op.create_table(
        "metagenome_annotation",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_metagenome_annotation_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_metagenome_annotation")),
    )
    op.create_table(
        "metagenome_assembly",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("scaffolds", sa.BigInteger(), nullable=True),
        sa.Column("contigs", sa.BigInteger(), nullable=True),
        sa.Column("scaf_bp", sa.BigInteger(), nullable=True),
        sa.Column("contig_bp", sa.BigInteger(), nullable=True),
        sa.Column("scaf_N50", sa.BigInteger(), nullable=True),
        sa.Column("scaf_L50", sa.BigInteger(), nullable=True),
        sa.Column("ctg_N50", sa.BigInteger(), nullable=True),
        sa.Column("ctg_L50", sa.BigInteger(), nullable=True),
        sa.Column("scaf_N90", sa.BigInteger(), nullable=True),
        sa.Column("scaf_L90", sa.BigInteger(), nullable=True),
        sa.Column("ctg_N90", sa.BigInteger(), nullable=True),
        sa.Column("ctg_L90", sa.BigInteger(), nullable=True),
        sa.Column("scaf_max", sa.BigInteger(), nullable=True),
        sa.Column("ctg_max", sa.BigInteger(), nullable=True),
        sa.Column("scaf_n_gt50K", sa.BigInteger(), nullable=True),
        sa.Column("scaf_l_gt50k", sa.BigInteger(), nullable=True),
        sa.Column("scaf_pct_gt50K", sa.BigInteger(), nullable=True),
        sa.Column("num_input_reads", sa.BigInteger(), nullable=True),
        sa.Column("num_aligned_reads", sa.BigInteger(), nullable=True),
        sa.Column("scaf_logsum", sa.Float(), nullable=True),
        sa.Column("scaf_powsum", sa.Float(), nullable=True),
        sa.Column("ctg_logsum", sa.Float(), nullable=True),
        sa.Column("ctg_powsum", sa.Float(), nullable=True),
        sa.Column("asm_score", sa.Float(), nullable=True),
        sa.Column("gap_pct", sa.Float(), nullable=True),
        sa.Column("gc_avg", sa.Float(), nullable=True),
        sa.Column("gc_std", sa.Float(), nullable=True),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_metagenome_assembly_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_metagenome_assembly")),
    )
    op.create_table(
        "metaproteomic_analysis",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_metaproteomic_analysis_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_metaproteomic_analysis")),
    )
    op.create_table(
        "metatranscriptome",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_metatranscriptome_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_metatranscriptome")),
    )
    op.create_table(
        "nom_analysis",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("used", sa.String(), nullable=False),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_nom_analysis_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_nom_analysis")),
    )
    op.create_table(
        "read_based_analysis",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_read_based_analysis_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_read_based_analysis")),
    )
    op.create_table(
        "reads_qc",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("git_url", sa.String(), nullable=False),
        sa.Column("started_at_time", sa.DateTime(), nullable=False),
        sa.Column("ended_at_time", sa.DateTime(), nullable=False),
        sa.Column("execution_resource", sa.String(), nullable=False),
        sa.Column("input_read_count", sa.BigInteger(), nullable=False),
        sa.Column("input_read_bases", sa.BigInteger(), nullable=False),
        sa.Column("output_read_count", sa.BigInteger(), nullable=False),
        sa.Column("output_read_bases", sa.BigInteger(), nullable=False),
        sa.Column("omics_processing_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f("fk_reads_qc_omics_processing_id_omics_processing"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reads_qc")),
    )
    op.create_table(
        "bulk_download_data_object",
        sa.Column("bulk_download_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("data_object_id", sa.String(), nullable=False),
        sa.Column("path", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["bulk_download_id"],
            ["bulk_download.id"],
            name=op.f("fk_bulk_download_data_object_bulk_download_id_bulk_download"),
        ),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_bulk_download_data_object_data_object_id_data_object"),
        ),
        sa.PrimaryKeyConstraint(
            "bulk_download_id",
            "data_object_id",
            name=op.f("pk_bulk_download_data_object"),
        ),
    )
    op.create_table(
        "file_download",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("data_object_id", sa.String(), nullable=False),
        sa.Column("ip", sa.String(), nullable=False),
        sa.Column("user_agent", sa.String(), nullable=True),
        sa.Column("orcid", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_file_download_data_object_id_data_object"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_file_download")),
    )
    op.create_table(
        "mag",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("mags_analysis_id", sa.String(), nullable=False),
        sa.Column("bin_name", sa.String(), nullable=True),
        sa.Column("number_of_contig", sa.BigInteger(), nullable=True),
        sa.Column("completeness", sa.Float(), nullable=True),
        sa.Column("contamination", sa.Float(), nullable=True),
        sa.Column("gene_count", sa.BigInteger(), nullable=True),
        sa.Column("bin_quality", sa.String(), nullable=True),
        sa.Column("num_16s", sa.BigInteger(), nullable=True),
        sa.Column("num_5s", sa.BigInteger(), nullable=True),
        sa.Column("num_23s", sa.BigInteger(), nullable=True),
        sa.Column("num_tRNA", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["mags_analysis_id"],
            ["mags_analysis.id"],
            name=op.f("fk_mag_mags_analysis_id_mags_analysis"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mag")),
    )
    op.create_table(
        "mags_analysis_input_association",
        sa.Column("mags_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_mags_analysis_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["mags_analysis_id"],
            ["mags_analysis.id"],
            name=op.f("fk_mags_analysis_input_association_mags_analysis_id_mags_analysis"),
        ),
        sa.UniqueConstraint(
            "mags_analysis_id",
            "data_object_id",
            name=op.f("uq_mags_analysis_input_association_mags_analysis_id"),
        ),
    )
    op.create_table(
        "mags_analysis_output_association",
        sa.Column("mags_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_mags_analysis_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["mags_analysis_id"],
            ["mags_analysis.id"],
            name=op.f("fk_mags_analysis_output_association_mags_analysis_id_mags_analysis"),
        ),
        sa.UniqueConstraint(
            "mags_analysis_id",
            "data_object_id",
            name=op.f("uq_mags_analysis_output_association_mags_analysis_id"),
        ),
    )
    op.create_table(
        "metabolomics_analysis_input_association",
        sa.Column("metabolomics_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metabolomics_analysis_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metabolomics_analysis_id"],
            ["metabolomics_analysis.id"],
            name=op.f(
                "fk_metabolomics_analysis_input_association_metabolomics_analysis_id_metabolomics_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "metabolomics_analysis_id",
            "data_object_id",
            name=op.f("uq_metabolomics_analysis_input_association_metabolomics_analysis_id"),
        ),
    )
    op.create_table(
        "metabolomics_analysis_output_association",
        sa.Column("metabolomics_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metabolomics_analysis_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metabolomics_analysis_id"],
            ["metabolomics_analysis.id"],
            name=op.f(
                "fk_metabolomics_analysis_output_association_metabolomics_analysis_id_metabolomics_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "metabolomics_analysis_id",
            "data_object_id",
            name=op.f("uq_metabolomics_analysis_output_association_metabolomics_analysis_id"),
        ),
    )
    op.create_table(
        "metagenome_annotation_input_association",
        sa.Column("metagenome_annotation_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metagenome_annotation_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metagenome_annotation_id"],
            ["metagenome_annotation.id"],
            name=op.f(
                "fk_metagenome_annotation_input_association_metagenome_annotation_id_metagenome_annotation"
            ),
        ),
        sa.UniqueConstraint(
            "metagenome_annotation_id",
            "data_object_id",
            name=op.f("uq_metagenome_annotation_input_association_metagenome_annotation_id"),
        ),
    )
    op.create_table(
        "metagenome_annotation_output_association",
        sa.Column("metagenome_annotation_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metagenome_annotation_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metagenome_annotation_id"],
            ["metagenome_annotation.id"],
            name=op.f(
                "fk_metagenome_annotation_output_association_metagenome_annotation_id_metagenome_annotation"
            ),
        ),
        sa.UniqueConstraint(
            "metagenome_annotation_id",
            "data_object_id",
            name=op.f("uq_metagenome_annotation_output_association_metagenome_annotation_id"),
        ),
    )
    op.create_table(
        "metagenome_assembly_input_association",
        sa.Column("metagenome_assembly_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metagenome_assembly_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metagenome_assembly_id"],
            ["metagenome_assembly.id"],
            name=op.f(
                "fk_metagenome_assembly_input_association_metagenome_assembly_id_metagenome_assembly"
            ),
        ),
        sa.UniqueConstraint(
            "metagenome_assembly_id",
            "data_object_id",
            name=op.f("uq_metagenome_assembly_input_association_metagenome_assembly_id"),
        ),
    )
    op.create_table(
        "metagenome_assembly_output_association",
        sa.Column("metagenome_assembly_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metagenome_assembly_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metagenome_assembly_id"],
            ["metagenome_assembly.id"],
            name=op.f(
                "fk_metagenome_assembly_output_association_metagenome_assembly_id_metagenome_assembly"
            ),
        ),
        sa.UniqueConstraint(
            "metagenome_assembly_id",
            "data_object_id",
            name=op.f("uq_metagenome_assembly_output_association_metagenome_assembly_id"),
        ),
    )
    op.create_table(
        "metap_gene_function_aggregation",
        sa.Column("metaproteomic_analysis_id", sa.String(), nullable=False),
        sa.Column("gene_function_id", sa.String(), nullable=False),
        sa.Column("count", sa.BigInteger(), nullable=False),
        sa.Column("best_protein", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["gene_function_id"],
            ["gene_function.id"],
            name=op.f("fk_metap_gene_function_aggregation_gene_function_id_gene_function"),
        ),
        sa.ForeignKeyConstraint(
            ["metaproteomic_analysis_id"],
            ["metaproteomic_analysis.id"],
            name=op.f(
                "fk_metap_gene_function_aggregation_metaproteomic_analysis_id_metaproteomic_analysis"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "metaproteomic_analysis_id",
            "gene_function_id",
            name=op.f("pk_metap_gene_function_aggregation"),
        ),
    )
    op.create_table(
        "metaproteomic_analysis_input_association",
        sa.Column("metaproteomic_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metaproteomic_analysis_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metaproteomic_analysis_id"],
            ["metaproteomic_analysis.id"],
            name=op.f(
                "fk_metaproteomic_analysis_input_association_metaproteomic_analysis_id_metaproteomic_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "metaproteomic_analysis_id",
            "data_object_id",
            name=op.f("uq_metaproteomic_analysis_input_association_metaproteomic_analysis_id"),
        ),
    )
    op.create_table(
        "metaproteomic_analysis_output_association",
        sa.Column("metaproteomic_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metaproteomic_analysis_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metaproteomic_analysis_id"],
            ["metaproteomic_analysis.id"],
            name=op.f(
                "fk_metaproteomic_analysis_output_association_metaproteomic_analysis_id_metaproteomic_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "metaproteomic_analysis_id",
            "data_object_id",
            name=op.f("uq_metaproteomic_analysis_output_association_metaproteomic_analysis_id"),
        ),
    )
    op.create_table(
        "metatranscriptome_input_association",
        sa.Column("metatranscriptome_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metatranscriptome_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metatranscriptome_id"],
            ["metatranscriptome.id"],
            name=op.f(
                "fk_metatranscriptome_input_association_metatranscriptome_id_metatranscriptome"
            ),
        ),
        sa.UniqueConstraint(
            "metatranscriptome_id",
            "data_object_id",
            name=op.f("uq_metatranscriptome_input_association_metatranscriptome_id"),
        ),
    )
    op.create_table(
        "metatranscriptome_output_association",
        sa.Column("metatranscriptome_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_metatranscriptome_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["metatranscriptome_id"],
            ["metatranscriptome.id"],
            name=op.f(
                "fk_metatranscriptome_output_association_metatranscriptome_id_metatranscriptome"
            ),
        ),
        sa.UniqueConstraint(
            "metatranscriptome_id",
            "data_object_id",
            name=op.f("uq_metatranscriptome_output_association_metatranscriptome_id"),
        ),
    )
    op.create_table(
        "mga_gene_function",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("metagenome_annotation_id", sa.String(), nullable=False),
        sa.Column("gene_function_id", sa.String(), nullable=False),
        sa.Column("subject", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["gene_function_id"],
            ["gene_function.id"],
            name=op.f("fk_mga_gene_function_gene_function_id_gene_function"),
        ),
        sa.ForeignKeyConstraint(
            ["metagenome_annotation_id"],
            ["metagenome_annotation.id"],
            name=op.f("fk_mga_gene_function_metagenome_annotation_id_metagenome_annotation"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mga_gene_function")),
        sa.UniqueConstraint("subject", name=op.f("uq_mga_gene_function_subject")),
    )
    op.create_table(
        "mga_gene_function_aggregation",
        sa.Column("metagenome_annotation_id", sa.String(), nullable=False),
        sa.Column("gene_function_id", sa.String(), nullable=False),
        sa.Column("count", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["gene_function_id"],
            ["gene_function.id"],
            name=op.f("fk_mga_gene_function_aggregation_gene_function_id_gene_function"),
        ),
        sa.ForeignKeyConstraint(
            ["metagenome_annotation_id"],
            ["metagenome_annotation.id"],
            name=op.f(
                "fk_mga_gene_function_aggregation_metagenome_annotation_id_metagenome_annotation"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "metagenome_annotation_id",
            "gene_function_id",
            name=op.f("pk_mga_gene_function_aggregation"),
        ),
    )
    op.create_table(
        "nom_analysis_input_association",
        sa.Column("nom_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_nom_analysis_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["nom_analysis_id"],
            ["nom_analysis.id"],
            name=op.f("fk_nom_analysis_input_association_nom_analysis_id_nom_analysis"),
        ),
        sa.UniqueConstraint(
            "nom_analysis_id",
            "data_object_id",
            name=op.f("uq_nom_analysis_input_association_nom_analysis_id"),
        ),
    )
    op.create_table(
        "nom_analysis_output_association",
        sa.Column("nom_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_nom_analysis_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["nom_analysis_id"],
            ["nom_analysis.id"],
            name=op.f("fk_nom_analysis_output_association_nom_analysis_id_nom_analysis"),
        ),
        sa.UniqueConstraint(
            "nom_analysis_id",
            "data_object_id",
            name=op.f("uq_nom_analysis_output_association_nom_analysis_id"),
        ),
    )
    op.create_table(
        "omics_processing_output_association",
        sa.Column("omics_processing_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_omics_processing_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["omics_processing_id"],
            ["omics_processing.id"],
            name=op.f(
                "fk_omics_processing_output_association_omics_processing_id_omics_processing"
            ),
        ),
        sa.UniqueConstraint(
            "omics_processing_id",
            "data_object_id",
            name=op.f("uq_omics_processing_output_association_omics_processing_id"),
        ),
    )
    op.create_table(
        "read_based_analysis_input_association",
        sa.Column("read_based_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_read_based_analysis_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["read_based_analysis_id"],
            ["read_based_analysis.id"],
            name=op.f(
                "fk_read_based_analysis_input_association_read_based_analysis_id_read_based_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "read_based_analysis_id",
            "data_object_id",
            name=op.f("uq_read_based_analysis_input_association_read_based_analysis_id"),
        ),
    )
    op.create_table(
        "read_based_analysis_output_association",
        sa.Column("read_based_analysis_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_read_based_analysis_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["read_based_analysis_id"],
            ["read_based_analysis.id"],
            name=op.f(
                "fk_read_based_analysis_output_association_read_based_analysis_id_read_based_analysis"
            ),
        ),
        sa.UniqueConstraint(
            "read_based_analysis_id",
            "data_object_id",
            name=op.f("uq_read_based_analysis_output_association_read_based_analysis_id"),
        ),
    )
    op.create_table(
        "reads_qc_input_association",
        sa.Column("reads_qc_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_reads_qc_input_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["reads_qc_id"],
            ["reads_qc.id"],
            name=op.f("fk_reads_qc_input_association_reads_qc_id_reads_qc"),
        ),
        sa.UniqueConstraint(
            "reads_qc_id",
            "data_object_id",
            name=op.f("uq_reads_qc_input_association_reads_qc_id"),
        ),
    )
    op.create_table(
        "reads_qc_output_association",
        sa.Column("reads_qc_id", sa.String(), nullable=True),
        sa.Column("data_object_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["data_object_id"],
            ["data_object.id"],
            name=op.f("fk_reads_qc_output_association_data_object_id_data_object"),
        ),
        sa.ForeignKeyConstraint(
            ["reads_qc_id"],
            ["reads_qc.id"],
            name=op.f("fk_reads_qc_output_association_reads_qc_id_reads_qc"),
        ),
        sa.UniqueConstraint(
            "reads_qc_id",
            "data_object_id",
            name=op.f("uq_reads_qc_output_association_reads_qc_id"),
        ),
    )
    op.create_table(
        "metaproteomic_peptide",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("metaproteomic_analysis_id", sa.String(), nullable=False),
        sa.Column("peptide_sequence", sa.String(), nullable=False),
        sa.Column("peptide_sum_masic_abundance", sa.BigInteger(), nullable=False),
        sa.Column("peptide_spectral_count", sa.BigInteger(), nullable=False),
        sa.Column("best_protein", sa.String(), nullable=False),
        sa.Column("min_q_value", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["best_protein"],
            ["mga_gene_function.subject"],
            name=op.f("fk_metaproteomic_peptide_best_protein_mga_gene_function"),
        ),
        sa.ForeignKeyConstraint(
            ["metaproteomic_analysis_id"],
            ["metaproteomic_analysis.id"],
            name=op.f("fk_metaproteomic_peptide_metaproteomic_analysis_id_metaproteomic_analysis"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_metaproteomic_peptide")),
    )
    op.create_table(
        "peptide_mga_gene_function",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("subject", sa.String(), nullable=False),
        sa.Column("metaproteomic_peptide_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["metaproteomic_peptide_id"],
            ["metaproteomic_peptide.id"],
            name=op.f(
                "fk_peptide_mga_gene_function_metaproteomic_peptide_id_metaproteomic_peptide"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["subject"],
            ["mga_gene_function.subject"],
            name=op.f("fk_peptide_mga_gene_function_subject_mga_gene_function"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_peptide_mga_gene_function")),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("peptide_mga_gene_function")
    op.drop_table("metaproteomic_peptide")
    op.drop_table("reads_qc_output_association")
    op.drop_table("reads_qc_input_association")
    op.drop_table("read_based_analysis_output_association")
    op.drop_table("read_based_analysis_input_association")
    op.drop_table("omics_processing_output_association")
    op.drop_table("nom_analysis_output_association")
    op.drop_table("nom_analysis_input_association")
    op.drop_table("mga_gene_function_aggregation")
    op.drop_table("mga_gene_function")
    op.drop_table("metatranscriptome_output_association")
    op.drop_table("metatranscriptome_input_association")
    op.drop_table("metaproteomic_analysis_output_association")
    op.drop_table("metaproteomic_analysis_input_association")
    op.drop_table("metap_gene_function_aggregation")
    op.drop_table("metagenome_assembly_output_association")
    op.drop_table("metagenome_assembly_input_association")
    op.drop_table("metagenome_annotation_output_association")
    op.drop_table("metagenome_annotation_input_association")
    op.drop_table("metabolomics_analysis_output_association")
    op.drop_table("metabolomics_analysis_input_association")
    op.drop_table("mags_analysis_output_association")
    op.drop_table("mags_analysis_input_association")
    op.drop_table("mag")
    op.drop_table("file_download")
    op.drop_table("bulk_download_data_object")
    op.drop_table("reads_qc")
    op.drop_table("read_based_analysis")
    op.drop_table("nom_analysis")
    op.drop_table("metatranscriptome")
    op.drop_table("metaproteomic_analysis")
    op.drop_table("metagenome_assembly")
    op.drop_table("metagenome_annotation")
    op.drop_table("metabolomics_analysis")
    op.drop_table("mags_analysis")
    op.drop_table("data_object")
    op.drop_table("omics_processing")
    op.drop_table("study_website")
    op.drop_table("study_publication")
    op.drop_table("biosample")
    op.drop_table("study")
    op.drop_table("publication")
    op.drop_table("envo_ancestor")
    op.drop_table("website")
    op.drop_table("submission_metadata")
    op.drop_table("search_index")
    op.drop_table("principal_investigator")
    op.drop_index(op.f("ix_ko_term_to_pathway_pathway"), table_name="ko_term_to_pathway")
    op.drop_table("ko_term_to_pathway")
    op.drop_index(op.f("ix_ko_term_to_module_module"), table_name="ko_term_to_module")
    op.drop_table("ko_term_to_module")
    op.drop_table("ko_term_text")
    op.drop_table("ingest_lock")
    op.drop_table("gene_function")
    op.drop_index(op.f("ix_envo_tree_parent_id"), table_name="envo_tree")
    op.drop_table("envo_tree")
    op.drop_table("envo_term")
    op.drop_table("doi_info")
    op.drop_table("bulk_download")
    # ### end Alembic commands ###
